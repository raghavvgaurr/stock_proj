import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
import plotly.graph_objects as go

# Step 1: Download stock data
df = yf.download('AAPL', start='2020-01-01', end='2024-01-01')
df['MA10'] = df['Close'].rolling(window=10).mean()

# Step 2: Feature Engineering
df['Close_lag1'] = df['Close'].shift(1)
df['Close_lag2'] = df['Close'].shift(2)
df = df.dropna()

# Step 3: Define Features and Target
X = df[['Close_lag1', 'Close_lag2', 'MA10']]
y = df['Close']

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=False)

# Step 5: Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)
predicted = model.predict(X_test)

# Step 6: Evaluation Metrics
rmse = np.sqrt(mean_squared_error(y_test, predicted))
mae = mean_absolute_error(y_test, predicted)
print("📉 Predicted Model RMSE:", rmse)
print("📉 Predicted Model MAE:", mae)

# Step 7: Buy/Sell Signals
buy_signals = []
sell_signals = []
signal_list = []
for i in range(len(predicted)):
    if i == 0:
        signal_list.append("Hold")
        continue
    if predicted[i] > predicted[i - 1]:
        buy_signals.append(i)
        signal_list.append("Buy")
    else:
        sell_signals.append(i)
        signal_list.append("Sell")

# Step 8: Investment Suggestion
latest_price = float(y_test.values[-1])
latest_predicted = float(predicted[-1])
trend = "↑ Upward" if latest_predicted > float(predicted[-2]) else "↓ Downward"
recommendation = "Buy ✅" if trend == "↑ Upward" else "Exit ❌"
investment = 10000
expected_return = (latest_predicted - latest_price) / latest_price * investment

print("\n📊 Current Price: ₹{:.2f}".format(latest_price))
print("📈 Predicted Price: ₹{:.2f}".format(latest_predicted))
print("📉 Trend:", trend)
print("🧠 Recommendation:", recommendation)
if recommendation == "Buy ✅":
    print("💰 Suggested Investment: ₹{}".format(investment))
    print("📈 Expected Profit: ₹{:.2f}".format(expected_return))

# Step 9: Return Table
returns = pd.DataFrame({
    'Date': y_test.index,
    'Actual Price': y_test.values.flatten(),
    'Predicted Price': predicted.flatten(),
    'Return (%)': ((predicted.flatten() - y_test.values.flatten()) / y_test.values.flatten()) * 100,
    'Signal': signal_list
})

# Step 10: Interactive Plot with Plotly
fig = go.Figure()

# Actual Price
fig.add_trace(go.Scatter(
    x=returns['Date'],
    y=returns['Actual Price'],
    mode='lines+markers',
    name='Actual Price',
    marker=dict(color='blue'),
    hovertemplate=
        'Date: %{x}<br>' +
        'Actual Price: ₹%{y:.2f}<br>' +
        '<extra></extra>'
))

# Predicted Price
fig.add_trace(go.Scatter(
    x=returns['Date'],
    y=returns['Predicted Price'],
    mode='lines+markers',
    name='Predicted Price',
    marker=dict(color='orange'),
    hovertemplate=
        'Date: %{x}<br>' +
        'Predicted Price: ₹%{y:.2f}<br>' +
        'Return: %{customdata[0]:.2f}%<br>' +
        'Signal: %{customdata[1]}<br>' +
        '<extra></extra>',
    customdata=np.stack((returns['Return (%)'], returns['Signal']), axis=-1)
))

# Title and layout
fig.update_layout(
    title='📊 Interactive Stock Price Prediction: Actual vs Predicted',
    xaxis_title='Date',
    yaxis_title='Price (₹)',
    legend_title='Legend',
    hovermode='x unified',
    template='plotly_white',
    width=1000,
    height=600
)

fig.show()